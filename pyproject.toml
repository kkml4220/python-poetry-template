[tool.poetry]
name = "python-poetry-template"
version = "0.1.0"
description = ""
authors = ["Takahashi Katsuyuki <takahashi@naxa.co.jp>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
load-dotenv = "^0.1.0"


[tool.poetry.group.dev.dependencies]
black = "^23.11.0"
isort = "^5.12.0"
ruff = "^0.1.6"
pytest = "^7.4.3"
mypy = "^1.7.1"
sphinx = "^7.2.6"
sphinx-rtd-theme = "^2.0.0"
sphinx-pyproject = "^0.3.0"
pytest-mock = "^3.12.0"
pytest-cov = "^4.1.0"
taskipy = "^1.12.2"
pre-commit = "^3.5.0"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.taskipy.tasks]
init = "pre-commit install"
test = "pytest -s -vv --cov=. --cov-branch --cov-report=html"
format = "task format-black && task format-isort"
format-black = "black src tests"
format-isort = "isort src tests"
lint = "task lint-black && task lint-ruff && task lint-mypy"
lint-ruff = "ruff src tests"
lint-mypy = "mypy src tests"
lint-black = "black --check src tests"
docs = "sphinx-apidoc -F -o docs/source src && sphinx-build docs/source docs/build"


[tool.black]
line-length = 100

[tool.isort]
# see: https://pycqa.github.io/isort/docs/configuration/multi_line_output_modes.html
profile = "black"
line_length = 100
import_heading_stdlib = "Standard Library"
import_heading_thirdparty = "Third Party Library"
import_heading_firstparty = "First Party Library"
import_heading_localfolder = "Local Library"
multi_line_output = 3
include_trailing_comma = true

[tool.mypy]
# The mypy configurations: https://mypy.readthedocs.io/en/stable/config_file.html
# Prefixes each error with the relevant context.
show_error_context = true
# Shows column numbers in error messages.
show_column_numbers = true
# Suppresses error messages about imports that cannot be resolved.
ignore_missing_imports = true
# Disallows defining functions without type annotations or with incomplete type annotations (a superset of disallow_incomplete_defs)
disallow_untyped_defs = true
# Shows a warning when returning a value with type Any from a function declared with a non- Any return type.
warn_return_any = true
# Shows a warning when encountering any code inferred to be unreachable or redundant after performing type analysis.
warn_unreachable = true
# Warns about unneeded # type: ignore comments.
warn_unused_ignores = true
# Warns about casting an expression to its inferred type.
warn_redundant_casts = true

[tool.ruff]
exclude = [".venv", "__pycache__", ".git"]

line-length = 100
indent-width = 4
